// ==== IC-905 BLE Server Version 2 ====
// ---- Granular Commentary: BLE Server for Nextion Display ----
// ---- Sends full status (heading + all command states) on interval and after commands ----

#include <BLEDevice.h>         // Core BLE library for ESP32
#include <BLEServer.h>         // BLE server functionality (advertising, connections)
#include <BLEUtils.h>          // BLE utility helpers (UUIDs, descriptors)
#include <BLE2902.h>           // BLE2902 descriptor for notify/indicate settings
#include <Arduino.h>           // Arduino core functions (millis, Serial, etc.)
#include <QMC5883LCompass.h>   // Compass library for heading reading

// ==== Hardware Pin Definitions ====
#define I2C_SDA 21             // Compass I2C SDA pin on ESP32
#define I2C_SCL 22             // Compass I2C SCL pin on ESP32
// OUTPUT PINS: Change these if your wiring is different!
#define POWER_PIN       23
#define MOTOR_LEFT_PIN  19
#define MOTOR_RIGHT_PIN 18
#define MOTOR_STOP_PIN   5
#define RELAY1_PIN      12
#define RELAY2_PIN      4
#define RELAY3_PIN      14
#define RELAY4_PIN      27
#define RELAY5_PIN      25

// ==== BLE UUIDs (must match client) ====
#define SERVICE_UUID      "12345678-1234-5678-1234-56789abcdef0" // Main BLE service UUID
#define STATUS_CHAR_UUID  "12345678-1234-5678-1234-56789abcdef1" // Notify characteristic UUID
#define COMMAND_CHAR_UUID "12345678-1234-5678-1234-56789abcdef2" // Write characteristic UUID

// ==== BLE Global Objects ====
BLEServer* pServer = nullptr;             // BLE server instance
BLEService* pService = nullptr;           // Main BLE service
BLECharacteristic* pStatusChar = nullptr; // Notify-only characteristic (server->client)
BLECharacteristic* pCommandChar = nullptr;// Write-only characteristic (client->server)
bool deviceConnected = false;             // True when a client is connected

// ==== Command Definitions ====
#define NUM_COMMANDS 9
const char* COMMANDS[NUM_COMMANDS] = {    // List of all supported toggles
  "control power", "motor left", "motor right", "motor stop",
  "relay 1", "relay 2", "relay 3", "relay 4", "relay 5"
};
bool commandStates[NUM_COMMANDS] = {false}; // Tracks ON/OFF for each command

// ==== Compass Sensor ====
QMC5883LCompass compass;                  // I2C compass object
float lastSentHeading = -999.0;           // Last heading sent (for change detection)

// ==== Helper: Find index of command by name ====
int getCommandIndex(const String& value) {
  for (int i = 0; i < NUM_COMMANDS; i++) {
    if (value == COMMANDS[i]) return i;   // Return index if found
  }
  return -1;                              // Not found
}

// ==== Helper: Read compass, return heading in degrees (0-359) or -1 for error ====
float getCurrentHeading() {
  compass.read();                         // Trigger a compass measurement
  int heading = compass.getAzimuth();     // Get heading in degrees
  if (heading < 0 || heading > 359)       // Out of expected range = error
    return -1;
  return (float)heading;
}

// ==== Helper: Build full status string: heading + each command's state ====
// Format: "heading: XX; control power on/off; motor left on/off; ...; relay 5 on/off;"
String buildFullStatusString(float heading) {
  String status = "heading: " + String((int)heading) + "; ";
  for (int i = 0; i < NUM_COMMANDS; i++) {
    status += String(COMMANDS[i]) + (commandStates[i] ? " on; " : " off; ");
  }
  return status;
}

// ==== BLE Server Callbacks: Handle connect/disconnect ====
class MyServerCallbacks : public BLEServerCallbacks {
  void onConnect(BLEServer*) override {
    deviceConnected = true;               // Set flag on connection
  }
  void onDisconnect(BLEServer*) override {
    deviceConnected = false;              // Clear flag on disconnect
    BLEDevice::getAdvertising()->start(); // Restart BLE advertising
  }
};

// ==== BLE Write Char Callbacks: Handle client commands ====
class CommandCharCallbacks : public BLECharacteristicCallbacks {
  void onWrite(BLECharacteristic* pCharacteristic) override {
    String value = pCharacteristic->getValue(); // Get client-sent string
    if (value == "PING") {                      // Special ping-pong
      pStatusChar->setValue("PONG");
      pStatusChar->notify();
      return;
    }
    int idx = getCommandIndex(value);           // Find which command this is
    if (idx >= 0) {                            // If command found
      commandStates[idx] = !commandStates[idx]; // Toggle ON/OFF state
      float heading = getCurrentHeading();      // Read heading for full update
      String fullStatus = buildFullStatusString(heading);
      pStatusChar->setValue(fullStatus.c_str()); // Full status string
      pStatusChar->notify();                     // Notify client
    }
    // Ignore unknown commands
  }
};

void setup() {
  Serial.begin(115200);                    // Serial for debugging
  Wire.begin(I2C_SDA, I2C_SCL);            // Start I2C on defined pins
  compass.init();                          // Initialize compass sensor

  BLEDevice::init("IC905_BLE_Server");     // Set BLE device name
  pServer = BLEDevice::createServer();     // Create BLE server instance
  pServer->setCallbacks(new MyServerCallbacks()); // Set connect/disconnect callbacks

  pService = pServer->createService(SERVICE_UUID); // Register main BLE service

  // ----- Create notify characteristic (server->client) -----
  pStatusChar = pService->createCharacteristic(
    STATUS_CHAR_UUID, BLECharacteristic::PROPERTY_NOTIFY);
  pStatusChar->addDescriptor(new BLE2902()); // Enable notify descriptor
  pStatusChar->setValue("READY");            // Initial status value

  // ----- Create write characteristic (client->server) -----
  pCommandChar = pService->createCharacteristic(
    COMMAND_CHAR_UUID, BLECharacteristic::PROPERTY_WRITE);
  pCommandChar->setCallbacks(new CommandCharCallbacks()); // Handle command writes

  pService->start();                             // Start BLE service

  BLEAdvertising* pAdvertising = BLEDevice::getAdvertising(); // Get BLE advertising object
  pAdvertising->addServiceUUID(SERVICE_UUID);    // Advertise our service
  pAdvertising->setScanResponse(true);           // Enable scan responses
  BLEDevice::startAdvertising();                 // Start BLE advertising
}

// ==== Main Loop: Send full status every 3 seconds if connected ====
void loop() {
  static unsigned long lastStatusNotify = 0;     // Timestamp of last notification

  // Every 3 seconds, if connected, send full status (heading + all command states)
  if (deviceConnected && millis() - lastStatusNotify > 3000) {
    lastStatusNotify = millis();                 // Update last notification time
    float heading = getCurrentHeading();         // Get compass heading
    if (heading >= 0 && abs(heading - lastSentHeading) >= 1.0) {
      String fullStatus = buildFullStatusString(heading); // Build full status string
      pStatusChar->setValue(fullStatus.c_str()); // Set notify value
      pStatusChar->notify();                     // Send to client
      lastSentHeading = heading;                 // Store last sent heading
      Serial.print("[MainLoop] Sending full status notification: ");
      Serial.println(fullStatus);
    }
  }
  delay(20); // Short delay for system stability
}
