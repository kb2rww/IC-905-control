#include <BLEDevice.h>         // Core BLE library
#include <BLEServer.h>         // BLE server functionality
#include <BLEUtils.h>          // BLE utilities
#include <BLE2902.h>           // BLE client configuration descriptor
#include <Arduino.h>           // Arduino core functions
#include <QMC5883LCompass.h>   // Compass sensor library

#define I2C_SDA 21             // I2C SDA pin on ESP32
#define I2C_SCL 22             // I2C SCL pin on ESP32

// OUTPUT PINS: Change these if your wiring is different!
#define POWER_PIN       23
#define MOTOR_LEFT_PIN  19
#define MOTOR_RIGHT_PIN 18
#define MOTOR_STOP_PIN   5
#define RELAY1_PIN      12
#define RELAY2_PIN      4
#define RELAY3_PIN      14
#define RELAY4_PIN      27
#define RELAY5_PIN      25

#define SERVICE_UUID      "12345678-1234-5678-1234-56789abcdef0"
#define STATUS_CHAR_UUID  "12345678-1234-5678-1234-56789abcdef1"
#define COMMAND_CHAR_UUID "12345678-1234-5678-1234-56789abcdef2"

BLEServer* pServer = nullptr;
BLEService* pService = nullptr;
BLECharacteristic* pStatusChar = nullptr;
BLECharacteristic* pCommandChar = nullptr;
bool deviceConnected = false;

#define NUM_COMMANDS 9
const char* COMMANDS[NUM_COMMANDS] = {
  "control power", "motor left", "motor right", "motor stop",
  "relay 1", "relay 2", "relay 3", "relay 4", "relay 5"
};
bool commandStates[NUM_COMMANDS] = {false};

QMC5883LCompass compass;
float lastSentHeading = -999.0;

// ================== Helper Functions ====================

// Find command index by string, or return -1 if not found
int getCommandIndex(const String& value) {
  for (int i = 0; i < NUM_COMMANDS; i++)
    if (value == COMMANDS[i]) return i;
  return -1;
}

// Read compass heading, return degrees (0-359), or -1 for error
float getCurrentHeading() {
  compass.read();
  int heading = compass.getAzimuth();
  if (heading < 0 || heading > 359)
    return -1;
  return (float)heading;
}

// Compose full status string with heading and all relay/motor/power states
String makeFullStatus(int heading) {
  String msg = "heading: " + String(heading);
  for (int i = 0; i < NUM_COMMANDS; ++i) {
    msg += "; ";
    msg += COMMANDS[i];
    msg += commandStates[i] ? " on" : " off";
  }
  return msg;
}

// ================== BLE Callbacks =======================

// BLE server events: manage connection status
class MyServerCallbacks : public BLEServerCallbacks {
  void onConnect(BLEServer*) override {
    deviceConnected = true;
    Serial.println("[BLE] Client connected!");
  }
  void onDisconnect(BLEServer*) override {
    deviceConnected = false;
    Serial.println("[BLE] Client disconnected. Restarting advertising...");
    BLEDevice::getAdvertising()->start();
  }
};

// BLE command characteristic events: handle client writes
class CommandCharCallbacks : public BLECharacteristicCallbacks {
  void onWrite(BLECharacteristic* pCharacteristic) override {
    String value = pCharacteristic->getValue();
    Serial.print("[BLE] Command received: ");
    Serial.println(value);

    if (value == "PING") {
      Serial.println("[BLE] Received PING, sending PONG.");
      pStatusChar->setValue("PONG");
      pStatusChar->notify();
      return;
    }

    int idx = getCommandIndex(value);
    if (idx >= 0) {
      commandStates[idx] = !commandStates[idx];
      Serial.print("[BLE] Toggled command state: ");
      Serial.print(COMMANDS[idx]); Serial.print(" -> ");
      Serial.println(commandStates[idx] ? "ON" : "OFF");

      // Set output pin for hardware
      switch(idx) {
        case 0: digitalWrite(POWER_PIN,       commandStates[idx]); break;
        case 1: digitalWrite(MOTOR_LEFT_PIN,  commandStates[idx]); break;
        case 2: digitalWrite(MOTOR_RIGHT_PIN, commandStates[idx]); break;
        case 3: digitalWrite(MOTOR_STOP_PIN,  commandStates[idx]); break;
        case 4: digitalWrite(RELAY1_PIN,      commandStates[idx]); break;
        case 5: digitalWrite(RELAY2_PIN,      commandStates[idx]); break;
        case 6: digitalWrite(RELAY3_PIN,      commandStates[idx]); break;
        case 7: digitalWrite(RELAY4_PIN,      commandStates[idx]); break;
        case 8: digitalWrite(RELAY5_PIN,      commandStates[idx]); break;
      }

      // Always send full status snapshot
      String notifyMsg = makeFullStatus((int)lastSentHeading);
      Serial.print("[BLE] Sending full status notification: ");
      Serial.println(notifyMsg);
      pStatusChar->setValue(notifyMsg.c_str());
      pStatusChar->notify();
    } else {
      Serial.println("[BLE] ERROR: Unknown command received!");
    }
  }
};

// ================== SETUP and LOOP =====================

void setup() {
  Serial.begin(115200);
  Serial.println("=== IC-905 BLE Server V2 STARTUP ===");

  // Setup output pins
  pinMode(POWER_PIN, OUTPUT);
  pinMode(MOTOR_LEFT_PIN, OUTPUT);
  pinMode(MOTOR_RIGHT_PIN, OUTPUT);
  pinMode(MOTOR_STOP_PIN, OUTPUT);
  pinMode(RELAY1_PIN, OUTPUT);
  pinMode(RELAY2_PIN, OUTPUT);
  pinMode(RELAY3_PIN, OUTPUT);
  pinMode(RELAY4_PIN, OUTPUT);
  pinMode(RELAY5_PIN, OUTPUT);

  // Set all outputs LOW at startup
  digitalWrite(POWER_PIN, LOW);
  digitalWrite(MOTOR_LEFT_PIN, LOW);
  digitalWrite(MOTOR_RIGHT_PIN, LOW);
  digitalWrite(MOTOR_STOP_PIN, LOW);
  digitalWrite(RELAY1_PIN, LOW);
  digitalWrite(RELAY2_PIN, LOW);
  digitalWrite(RELAY3_PIN, LOW);
  digitalWrite(RELAY4_PIN, LOW);
  digitalWrite(RELAY5_PIN, LOW);

  // Setup I2C and compass
  Wire.begin(I2C_SDA, I2C_SCL);
  delay(100);
  compass.init();
  delay(100);

  // BLE Setup
  BLEDevice::init("IC905_BLE_Server");
  BLEDevice::setMTU(100); // Increase if both server and client support it

  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  pService = pServer->createService(SERVICE_UUID);

  pStatusChar = pService->createCharacteristic(
    STATUS_CHAR_UUID, BLECharacteristic::PROPERTY_NOTIFY);
  pStatusChar->addDescriptor(new BLE2902());
  pStatusChar->setValue("READY");

  pCommandChar = pService->createCharacteristic(
    COMMAND_CHAR_UUID, BLECharacteristic::PROPERTY_WRITE);
  pCommandChar->setCallbacks(new CommandCharCallbacks());

  pService->start();

  BLEAdvertising* pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->setScanResponse(true);
  BLEDevice::startAdvertising();

  Serial.println("=== IC-905 BLE Server READY ===");
}

void loop() {
  static unsigned long lastHeadingNotify = 0;

  // Every 3 seconds, send full status (heading + all states)
  if (deviceConnected && millis() - lastHeadingNotify > 3000) {
    lastHeadingNotify = millis();
    float heading = getCurrentHeading();
    if (heading >= 0 && abs(heading - lastSentHeading) >= 1.0) {
      String notifyMsg = makeFullStatus((int)heading);
      Serial.print("[MainLoop] Sending full status notification: ");
      Serial.println(notifyMsg);
      pStatusChar->setValue(notifyMsg.c_str());
      pStatusChar->notify();
      lastSentHeading = heading;
    }
  }
  delay(20);
}
